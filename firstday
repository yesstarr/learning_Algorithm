시간복잡도 : 문제를 해결하는데 걸리는 시간의 상관관계
빅오표기법 : 주어진 식을 값이 가장 큰 대표항만 남겨서 나타내는 법
연습문제1
#include <iostream>

int main()
{
    int n;
    std:: cin >> n;
    int result;
    result = func1(n);
    std:: cout << result; 
    return 0;
}
int func1(int N)
{
    int sum = 0;
    for(int i = 1; i <= N; i++)
    {
        if(i % 3 == 0 || i % 5 == 0)
        {
            sum += i;
        }
    } 
    return sum;
}
O(n)
연습문제2
#include <iostream>
using namespace std;//합 100이 있는지 없는지 판별
int func2(int arr[], int N)
{
	for (int i = 0; i < N; i++)
	{
		for (int k = 0; k < N; k++)
		{
			if (arr[i] + arr[k + 1] == 100)
			{
				return 1;
			}
		}
	}
	return 0;
}
int main()
{
	int N;
	int arr[100];
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		cin >> arr[i];
	}
	int result = func2(arr,N);
	cout << result;
}
O(n^2)
연습문제 3
#include <iostream>
using namespace std;//제곱근인지 아닌지 판별하기
int func3(int N)
{
	for (int i = 1; i * i <= N; i++)
	{
		if (i * i == N)
		{
			return 1;
		}
	}
	return 0;
}
int main()
{
	int result;
	int n;
	cin >> n;
	result = func3(n);
	cout << result << endl;
	return 0;

}

연습문제 4
#include <iostream>
#include <cmath>
//2의 거듭제곱수중 가장 큰 것 찾기,오버플로우 주의!!!!!!!!!!!!!!!!!!!! 
using namespace std;
long long int func4(long long int N)
{
	long long int max = 0;
	long long int se = 0;
	for (int i = 1; i <= 31; i++)
	{
		se = pow(2,i);
		if (N >= se)
		{
			max = se;
		}
	 }
	return max;
}

int main()
{
	while (1)
	{
		long long  int a;
		cin >> a;
		if (a == 0)
		{
			break;
		}
		long long int result;
		result = func4(a);
		cout << result << endl;
	
	}
	return 0;
} 
시간복잡도 : o(lg n)

정수자료형
1 byte = 8bit
2진수 형태로 한 비트씩 들어감

char 자료형에서 마지막 칸에서는 -2의 7승으로 들어감

unsigned char형 에서는 범위가 0~255 (2의8승-1) 00000000~01111111
char형 에서는 범위가 -128(-2의 7 승) ~127 (2의7승 -1) 11111111~011111111

integer overflow
01111111 +00000001 = 11111111 이 되어서 -128이 되는 현상
127        + 1

*다시 보기
실수자료형
1. 실수의 저장/연산 과정에서 반드시 오차가 발생할 수 밖에 없다.
2. double에 long long 범위 안에 수를 담으면 안된다
3. 실수를 비교할때는 등호를 사용하면 안된다
*
